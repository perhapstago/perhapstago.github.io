import{_ as t,X as i,Y as u,Z as e,$ as l,a1 as c,a2 as r,E as a}from"./framework-8575b556.js";const n={},p=e("h1",{id:"_00-官方教程读后记录",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#_00-官方教程读后记录","aria-hidden":"true"},"#"),l(" 00.官方教程读后记录")],-1),b={id:"官方教程",tabindex:"-1"},s=e("a",{class:"header-anchor",href:"#官方教程","aria-hidden":"true"},"#",-1),k={href:"https://developer.apple.com/tutorials/swiftui",target:"_blank",rel:"noopener noreferrer"},d=r("<p>以下是整理的一些注意点：</p><ul><li>声明式编程风格，可以简化UI的创建和管理</li></ul><blockquote><p>相比传统的imperative编程风格，SwiftUI能够更好地表达开发者的意图，并且代码更易于阅读和维护。</p></blockquote><ul><li>提供许多原生视图和容器</li></ul><blockquote><p>这些视图和容器是iOS应用程序的基础组件，包括文本视图、图像视图、列表视图、导航视图等等。</p></blockquote><ul><li>使用视图修饰符来更改和自定义视图的样式和操作</li></ul><blockquote><p>视图修饰符可以使用点语法和链式调用来组合和堆叠。</p></blockquote><ul><li>布局是自适应和动态，</li></ul><blockquote><p>能够适应不同大小的屏幕和设备，并且可以根据不同的环境条件自动更新布局。</p></blockquote><ul><li>数据模型是由结构体定义</li></ul><blockquote><p>可以使用@State、@Binding、@ObservedObject等属性包装器来管理数据的</p></blockquote><ul><li>支持动画效果</li></ul><blockquote><p>通过对数据模型和视图进行动画效果的绑定来实现动态效果</p></blockquote><ul><li>支持本地化和多语言支持。</li></ul><blockquote><p>可以使用LocalizeStringKey来声明多语言字符串，并且在运行时根据当前语言环境自动切换显示的文本。</p></blockquote><ul><li>具良好的可访问性和无障碍功能</li></ul><blockquote><p>可以通过使用accessibility标签和属性来增强UI的可访问性和可用性，还支持动态字体和粗细等无障碍功能。</p></blockquote><ul><li>网络请求和数据解析</li></ul><blockquote><p>可以使用URLSession和Codable协议来进行数据请求和解析。还提供了类似于UIKit中UIActivityIndicatorView的ActivityIndicator视图来显示加载中的进度。</p></blockquote><ul><li>强大的测试支持</li></ul><blockquote><p>可以使用Xcode中的SwiftUI Previews来测试和预览UI。同时，还提供了方便的模拟数据和测试数据生成器来进行单元测试和UI测试。</p></blockquote><ul><li>视图具有生命周期方法</li></ul><blockquote><p>可以在视图创建、出现、消失和更新时执行一些操作，这使得开发者可以更加精细地控制 UI 的行为。</p></blockquote><ul><li>数据绑定机制非常强大</li></ul><blockquote><p>可以轻松地实现视图与数据之间的双向绑定，使得 UI 的状态随着数据的变化而自动更新。</p></blockquote><ul><li>支持 Swift 的属性包装器（property wrappers）来处理视图的状态和属性</li></ul><blockquote><p>如 @State、@Binding、@EnvironmentObject 等。</p></blockquote><ul><li>支持使用自定义视图修饰符（view modifier）来修改视图的外观和行为</li></ul><blockquote><p>如 font()、foregroundColor() 等，这些修饰符可以链式调用，非常方便。</p></blockquote><ul><li>支持与 UIKit 的混合使用，</li></ul><blockquote><p>开发者可以在 SwiftUI 中嵌入 UIKit 视图和控件，也可以在 UIKit 中嵌入 SwiftUI 视图和控件，这使得现有的 UIKit 应用程序可以逐步转换为 SwiftUI 应用程序，而不需要完全重写。</p></blockquote><ul><li>支持 Dark Mode</li></ul><blockquote><p>SwiftUI 为您的应用程序自动支持暗黑模式，您无需编写任何额外的代码。</p></blockquote><ul><li>使用 Combine 框架</li></ul><blockquote><p>SwiftUI 支持使用 Combine 框架处理异步事件和数据流。</p></blockquote>",35);function q(_,f){const o=a("ExternalLinkIcon");return i(),u("div",null,[p,e("h2",b,[s,l(),e("a",k,[l("官方教程"),c(o)])]),d])}const h=t(n,[["render",q],["__file","0.html.vue"]]);export{h as default};
