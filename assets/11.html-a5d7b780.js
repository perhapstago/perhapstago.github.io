const n=JSON.parse('{"key":"v-21d9e076","path":"/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/11.html","title":"required","lang":"zh-CN","frontmatter":{"date":"2021-2-12","category":["iOS","Swift"],"tag":["语法"],"description":"required required关键字可以在Swift中的初始化器前面使用。 子类有不同于父类的初始化方法时（参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override。 当子类没有初始化方法时，可以不用实现父类的required初始化方法。 例一： class Person { func run(){ print(\\"running\\") } // required func eat() {//required无法修饰方法，required修饰符只能用于修饰类初始化方法。 // print(\\"eating\\") // } } //继承 class Teacher: Person{ override func eat() { super.eat() print(\\"eating sth.\\") } }","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/11.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"required"}],["meta",{"property":"og:description","content":"required required关键字可以在Swift中的初始化器前面使用。 子类有不同于父类的初始化方法时（参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override。 当子类没有初始化方法时，可以不用实现父类的required初始化方法。 例一： class Person { func run(){ print(\\"running\\") } // required func eat() {//required无法修饰方法，required修饰符只能用于修饰类初始化方法。 // print(\\"eating\\") // } } //继承 class Teacher: Person{ override func eat() { super.eat() print(\\"eating sth.\\") } }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T05:11:23.000Z"}],["meta",{"property":"article:tag","content":"语法"}],["meta",{"property":"article:published_time","content":"2021-02-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T05:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"required\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-02-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T05:11:23.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679640723000,"updatedTime":1679721083000,"contributors":[{"name":"perhapsdone","email":"","commits":2}]},"readingTime":{"minutes":0.63,"words":189},"filePathRelative":"开发/『Swift』/11.md","localizedDate":"2021年2月12日","excerpt":"<h1> required</h1>\\n<blockquote>\\n<p>required关键字可以在Swift中的初始化器前面使用。</p>\\n<p>子类有不同于父类的初始化方法时（参数类型和数量异于父类），子类必须要实现父类的required初始化方法，并且也要使用required修饰符而不是override。</p>\\n<p>当子类没有初始化方法时，可以不用实现父类的required初始化方法。</p>\\n</blockquote>\\n<p>例一：</p>\\n<div class=\\"language-swift line-numbers-mode\\" data-ext=\\"swift\\"><pre class=\\"language-swift\\"><code><span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Person</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">func</span> <span class=\\"token function-definition function\\">run</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal\\"><span class=\\"token string\\">\\"running\\"</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token comment\\">//    required func eat() {//required无法修饰方法，required修饰符只能用于修饰类初始化方法。</span>\\n<span class=\\"token comment\\">//        print(\\"eating\\")</span>\\n<span class=\\"token comment\\">//    }</span>\\n<span class=\\"token punctuation\\">}</span>\\n\\n<span class=\\"token comment\\">//继承</span>\\n<span class=\\"token keyword\\">class</span> <span class=\\"token class-name\\">Teacher</span><span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">Person</span><span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">override</span> <span class=\\"token keyword\\">func</span> <span class=\\"token function-definition function\\">eat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token keyword\\">super</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">eat</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token function\\">print</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal\\"><span class=\\"token string\\">\\"eating sth.\\"</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token punctuation\\">}</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
