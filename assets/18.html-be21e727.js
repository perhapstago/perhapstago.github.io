const e=JSON.parse('{"key":"v-09eb6af8","path":"/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/18.html","title":"UIView的layout方法","lang":"zh-CN","frontmatter":{"date":"2019-7-23","category":["iOS"],"tag":["UI"],"description":"UIView的layout方法 layoutSubviews layoutSubviews 方法是 UIView 的一个布局方法，主要用于对 UIView 的子视图进行布局。当 UIView 的 frame 或 bounds 属性发生变化时就会自动调用 layoutSubviews 方法。layoutSubviews 方法默认为空实现，因此我们可以在子类中覆盖这个方法，实现自己的布局逻辑。 调用时机 在 iOS 中，UIView 的布局是自下而上的，也就是说，当一个视图的 frame 或 bounds 属性发生变化时，它的所有子视图都会相应地调整布局。在这个过程中，iOS 会先调用父视图的 layoutSubviews 方法，然后再调用子视图的 layoutSubviews 方法。这意味着，如果我们需要修改某个子视图的布局，就可以在父视图的 layoutSubviews 方法中对它进行修改。","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/18.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"UIView的layout方法"}],["meta",{"property":"og:description","content":"UIView的layout方法 layoutSubviews layoutSubviews 方法是 UIView 的一个布局方法，主要用于对 UIView 的子视图进行布局。当 UIView 的 frame 或 bounds 属性发生变化时就会自动调用 layoutSubviews 方法。layoutSubviews 方法默认为空实现，因此我们可以在子类中覆盖这个方法，实现自己的布局逻辑。 调用时机 在 iOS 中，UIView 的布局是自下而上的，也就是说，当一个视图的 frame 或 bounds 属性发生变化时，它的所有子视图都会相应地调整布局。在这个过程中，iOS 会先调用父视图的 layoutSubviews 方法，然后再调用子视图的 layoutSubviews 方法。这意味着，如果我们需要修改某个子视图的布局，就可以在父视图的 layoutSubviews 方法中对它进行修改。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T05:11:23.000Z"}],["meta",{"property":"article:tag","content":"UI"}],["meta",{"property":"article:published_time","content":"2019-07-23T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T05:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"UIView的layout方法\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-07-23T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T05:11:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"layoutSubviews","slug":"layoutsubviews","link":"#layoutsubviews","children":[{"level":3,"title":"调用时机","slug":"调用时机","link":"#调用时机","children":[]},{"level":3,"title":"注意事项","slug":"注意事项","link":"#注意事项","children":[]},{"level":3,"title":"使用场景","slug":"使用场景","link":"#使用场景","children":[]}]},{"level":2,"title":"setNeedsLayout","slug":"setneedslayout","link":"#setneedslayout","children":[{"level":3,"title":"调用时机","slug":"调用时机-1","link":"#调用时机-1","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-1","link":"#注意事项-1","children":[]}]},{"level":2,"title":"layoutIfNeeded","slug":"layoutifneeded","link":"#layoutifneeded","children":[{"level":3,"title":"调用时机","slug":"调用时机-2","link":"#调用时机-2","children":[]},{"level":3,"title":"注意事项","slug":"注意事项-2","link":"#注意事项-2","children":[]},{"level":3,"title":"使用场景","slug":"使用场景-1","link":"#使用场景-1","children":[]}]},{"level":2,"title":"drawRect","slug":"drawrect","link":"#drawrect","children":[]},{"level":2,"title":"调用时机","slug":"调用时机-3","link":"#调用时机-3","children":[]}],"git":{"createdTime":1679640723000,"updatedTime":1679721083000,"contributors":[{"name":"perhapsdone","email":"","commits":2}]},"readingTime":{"minutes":5.66,"words":1698},"filePathRelative":"开发/『iOS』/18.md","localizedDate":"2019年7月23日","excerpt":"<h1> UIView的layout方法</h1>\\n<h2> layoutSubviews</h2>\\n<p>layoutSubviews 方法是 UIView 的一个布局方法，主要用于对 UIView 的子视图进行布局。当 UIView 的 frame 或 bounds 属性发生变化时就会自动调用 layoutSubviews 方法。layoutSubviews 方法默认为空实现，因此我们可以在子类中覆盖这个方法，实现自己的布局逻辑。</p>\\n<h3> 调用时机</h3>\\n<p>在 iOS 中，UIView 的布局是自下而上的，也就是说，当一个视图的 frame 或 bounds 属性发生变化时，它的所有子视图都会相应地调整布局。在这个过程中，iOS 会先调用父视图的 layoutSubviews 方法，然后再调用子视图的 layoutSubviews 方法。这意味着，如果我们需要修改某个子视图的布局，就可以在父视图的 layoutSubviews 方法中对它进行修改。<br></p>","autoDesc":true}');export{e as data};
