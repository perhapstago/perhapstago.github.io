const e=JSON.parse('{"key":"v-e47a7560","path":"/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/7.html","title":"关于RunLoop","lang":"zh-CN","frontmatter":{"date":"2019-10-12T00:00:00.000Z","category":["iOS"],"tag":["底层原理"],"description":"关于RunLoop RunLoop 是 iOS 和 macOS 中非常重要的概念之一，它是一个事件循环机制，能够管理事件和计时器，也可以用于处理输入源和输出源。 RunLoop 是一个事件循环机制，用于在应用程序中处理事件和计时器。RunLoop 为应用程序提供了一种机制，以等待输入源和输出源，同时避免 CPU 的空转。 RunLoop 是一种基于消息循环的机制。当一个事件发生时，RunLoop 将该事件添加到消息队列中，然后开始处理该消息队列中的事件。这个过程会一直持续下去，直到没有事件需要处理为止。 实现机制","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/7.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"关于RunLoop"}],["meta",{"property":"og:description","content":"关于RunLoop RunLoop 是 iOS 和 macOS 中非常重要的概念之一，它是一个事件循环机制，能够管理事件和计时器，也可以用于处理输入源和输出源。 RunLoop 是一个事件循环机制，用于在应用程序中处理事件和计时器。RunLoop 为应用程序提供了一种机制，以等待输入源和输出源，同时避免 CPU 的空转。 RunLoop 是一种基于消息循环的机制。当一个事件发生时，RunLoop 将该事件添加到消息队列中，然后开始处理该消息队列中的事件。这个过程会一直持续下去，直到没有事件需要处理为止。 实现机制"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T05:11:23.000Z"}],["meta",{"property":"article:tag","content":"底层原理"}],["meta",{"property":"article:published_time","content":"2019-10-12T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T05:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"关于RunLoop\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2019-10-12T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T05:11:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"实现机制","slug":"实现机制","link":"#实现机制","children":[{"level":3,"title":"内核层","slug":"内核层","link":"#内核层","children":[]},{"level":3,"title":"用户层","slug":"用户层","link":"#用户层","children":[]},{"level":3,"title":"CFRunLoopMode","slug":"cfrunloopmode","link":"#cfrunloopmode","children":[]},{"level":3,"title":"CFRunLoopSource","slug":"cfrunloopsource","link":"#cfrunloopsource","children":[]}]},{"level":2,"title":"事件循环机制","slug":"事件循环机制","link":"#事件循环机制","children":[]},{"level":2,"title":"RunLoop和线程","slug":"runloop和线程","link":"#runloop和线程","children":[{"level":3,"title":"线程","slug":"线程","link":"#线程","children":[]},{"level":3,"title":"线程和 RunLoop 的关系","slug":"线程和-runloop-的关系","link":"#线程和-runloop-的关系","children":[]}]},{"level":2,"title":"RunLoop 的使用场景","slug":"runloop-的使用场景","link":"#runloop-的使用场景","children":[]}],"git":{"createdTime":1679640723000,"updatedTime":1679721083000,"contributors":[{"name":"perhapsdone","email":"","commits":2}]},"readingTime":{"minutes":9.26,"words":2778},"filePathRelative":"开发/『iOS』/7.md","localizedDate":"2019年10月12日","excerpt":"<h1> 关于RunLoop</h1>\\n<p>RunLoop 是 iOS 和 macOS 中非常重要的概念之一，它是一个事件循环机制，能够管理事件和计时器，也可以用于处理输入源和输出源。 <br></p>\\n<p>RunLoop 是一个事件循环机制，用于在应用程序中处理事件和计时器。RunLoop 为应用程序提供了一种机制，以等待输入源和输出源，同时避免 CPU 的空转。<br>\\nRunLoop 是一种基于消息循环的机制。当一个事件发生时，RunLoop 将该事件添加到消息队列中，然后开始处理该消息队列中的事件。这个过程会一直持续下去，直到没有事件需要处理为止。</p>\\n<h2> 实现机制</h2>","autoDesc":true}');export{e as data};
