const e=JSON.parse('{"key":"v-2d5e7eeb","path":"/%E5%BC%80%E5%8F%91/%E3%80%8EXcode%E3%80%8F/4.html","title":"Xcode launch screens","lang":"zh-CN","frontmatter":{"date":"2021-01-06T00:00:00.000Z","category":["Xcode"],"description":"Xcode launch screens 当程序跑起来，Launch screens出现，加载应用程序后，用户可以开始使用应用程序。 Xcode默认提供storyboard可以使用它来设置加载屏幕。 虽然大多数情况下效果很好，但Xcode 12和iOS 14中提供了新选项。 launch screens 的历史 在Xcode 6之前，我们唯一的选择是在asset目录中提供静态图像。这已经比以前更好了，因为我们曾经为这些图像设置了特定的文件名。 Xcode 6附带的iOS 8允许我们用storyboard替换静态图像。这已经简化并改进了定义加载屏幕的方式，但选项仍然有限。launch screens 被大量缓存，动态替换是不可能的。然而，使用label, imageView和其他界面元素消除了打开图像编辑应用程序以导出所有正确尺寸的图像的要求。","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EXcode%E3%80%8F/4.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"Xcode launch screens"}],["meta",{"property":"og:description","content":"Xcode launch screens 当程序跑起来，Launch screens出现，加载应用程序后，用户可以开始使用应用程序。 Xcode默认提供storyboard可以使用它来设置加载屏幕。 虽然大多数情况下效果很好，但Xcode 12和iOS 14中提供了新选项。 launch screens 的历史 在Xcode 6之前，我们唯一的选择是在asset目录中提供静态图像。这已经比以前更好了，因为我们曾经为这些图像设置了特定的文件名。 Xcode 6附带的iOS 8允许我们用storyboard替换静态图像。这已经简化并改进了定义加载屏幕的方式，但选项仍然有限。launch screens 被大量缓存，动态替换是不可能的。然而，使用label, imageView和其他界面元素消除了打开图像编辑应用程序以导出所有正确尺寸的图像的要求。"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"http://yunpu.tech/"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T06:52:03.000Z"}],["meta",{"name":"twitter:card","content":"summary_large_image"}],["meta",{"name":"twitter:image:alt","content":"Xcode launch screens"}],["meta",{"property":"article:published_time","content":"2021-01-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-24T06:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Xcode launch screens\\",\\"image\\":[\\"http://yunpu.tech/\\"],\\"datePublished\\":\\"2021-01-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-24T06:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"launch screens 的历史","slug":"launch-screens-的历史","link":"#launch-screens-的历史","children":[]},{"level":2,"title":"如何使用launch screens","slug":"如何使用launch-screens","link":"#如何使用launch-screens","children":[]},{"level":2,"title":"开发过程中清除缓存","slug":"开发过程中清除缓存","link":"#开发过程中清除缓存","children":[]},{"level":2,"title":"睡眠延迟应用程序启动","slug":"睡眠延迟应用程序启动","link":"#睡眠延迟应用程序启动","children":[]},{"level":2,"title":"实现launch screens的选项","slug":"实现launch-screens的选项","link":"#实现launch-screens的选项","children":[]},{"level":2,"title":"storyboard","slug":"storyboard","link":"#storyboard","children":[]},{"level":2,"title":"plist配置","slug":"plist配置","link":"#plist配置","children":[]},{"level":2,"title":"根据 URL scheme配置launch screens","slug":"根据-url-scheme配置launch-screens","link":"#根据-url-scheme配置launch-screens","children":[]}],"git":{"createdTime":1679640723000,"updatedTime":1679640723000,"contributors":[{"name":"perhapsdone","email":"","commits":1}]},"readingTime":{"minutes":3.94,"words":1182},"filePathRelative":"开发/『Xcode』/4.md","localizedDate":"2021年1月6日","excerpt":"<h1> Xcode launch screens</h1>\\n<p>当程序跑起来，Launch screens出现，加载应用程序后，用户可以开始使用应用程序。<br>\\nXcode默认提供storyboard可以使用它来设置加载屏幕。<br>\\n虽然大多数情况下效果很好，但Xcode 12和iOS 14中提供了新选项。</p>\\n<h2> launch screens 的历史</h2>\\n<p>在Xcode 6之前，我们唯一的选择是在asset目录中提供静态图像。这已经比以前更好了，因为我们曾经为这些图像设置了特定的文件名。<br></p>\\n<p>Xcode 6附带的iOS 8允许我们用storyboard替换静态图像。这已经简化并改进了定义加载屏幕的方式，但选项仍然有限。launch screens 被大量缓存，动态替换是不可能的。然而，使用label, imageView和其他界面元素消除了打开图像编辑应用程序以导出所有正确尺寸的图像的要求。<br></p>","autoDesc":true}');export{e as data};
