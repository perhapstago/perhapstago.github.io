const e=JSON.parse('{"key":"v-781fee99","path":"/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/4.html","title":"可选类型","lang":"zh-CN","frontmatter":{"date":"2021-1-03","description":"可选类型 处理丢失数据 使用Int等类型来保整数。但是，如果想为用户存储age属性，如果你不知道某人的年龄，你会怎么做？ 或许可以使用1000或-1等特殊数字来表示“未知”，这两个数字都是不可能的年龄，但真的会记得它使用的所有地方的这个数字吗？ Swift的解决方案是可选类型，可以制作任何类型的可选类型。可选整数可能有一个像0或40这样的数字，但可能根本没有值——nil。 要使类型可选，请在它后面添加一个问号： var age: Int? = nil","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/4.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"可选类型"}],["meta",{"property":"og:description","content":"可选类型 处理丢失数据 使用Int等类型来保整数。但是，如果想为用户存储age属性，如果你不知道某人的年龄，你会怎么做？ 或许可以使用1000或-1等特殊数字来表示“未知”，这两个数字都是不可能的年龄，但真的会记得它使用的所有地方的这个数字吗？ Swift的解决方案是可选类型，可以制作任何类型的可选类型。可选整数可能有一个像0或40这样的数字，但可能根本没有值——nil。 要使类型可选，请在它后面添加一个问号： var age: Int? = nil"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T06:52:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-01-03T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-24T06:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"可选类型\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-03T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-24T06:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"处理丢失数据","slug":"处理丢失数据","link":"#处理丢失数据","children":[]},{"level":2,"title":"可选类型解包","slug":"可选类型解包","link":"#可选类型解包","children":[]},{"level":2,"title":"guard let","slug":"guard-let","link":"#guard-let","children":[]},{"level":2,"title":"强制解包","slug":"强制解包","link":"#强制解包","children":[]},{"level":2,"title":"隐式拆包可选类型","slug":"隐式拆包可选类型","link":"#隐式拆包可选类型","children":[]},{"level":2,"title":"nil 合并解包","slug":"nil-合并解包","link":"#nil-合并解包","children":[]},{"level":2,"title":"可选类型链","slug":"可选类型链","link":"#可选类型链","children":[]},{"level":2,"title":"抛出函数的try","slug":"抛出函数的try","link":"#抛出函数的try","children":[]},{"level":2,"title":"可失败的初始化","slug":"可失败的初始化","link":"#可失败的初始化","children":[]},{"level":2,"title":"类型选择 (Typecasting)","slug":"类型选择-typecasting","link":"#类型选择-typecasting","children":[]}],"git":{"createdTime":1679640723000,"updatedTime":1679640723000,"contributors":[{"name":"perhapsdone","email":"","commits":1}]},"readingTime":{"minutes":4.44,"words":1332},"filePathRelative":"开发/『Swift』/4.md","localizedDate":"2021年1月3日","excerpt":"<h1> 可选类型</h1>\\n<h2> 处理丢失数据</h2>\\n<p>使用Int等类型来保整数。但是，如果想为用户存储age属性，如果你不知道某人的年龄，你会怎么做？\\n或许可以使用1000或-1等特殊数字来表示“未知”，这两个数字都是不可能的年龄，但真的会记得它使用的所有地方的这个数字吗？\\nSwift的解决方案是可选类型，可以制作任何类型的可选类型。可选整数可能有一个像0或40这样的数字，但可能根本没有值——nil。\\n要使类型可选，请在它后面添加一个问号：</p>\\n<div class=\\"language-swift line-numbers-mode\\" data-ext=\\"swift\\"><pre class=\\"language-swift\\"><code><span class=\\"token keyword\\">var</span> age<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">Int</span><span class=\\"token operator\\">?</span> <span class=\\"token operator\\">=</span> <span class=\\"token nil constant\\">nil</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
