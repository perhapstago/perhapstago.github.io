const a=JSON.parse('{"key":"v-7b899fd7","path":"/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/6.html","title":"Equatable","lang":"zh-CN","frontmatter":{"date":"2021-1-06","description":"Equatable 检查两个对象或值是否被视为相等，这绝对是所有编程中最常见的操作之一。 Swift实现相等的一个最有趣的方面是它都是以一种面向协议的方式完成的——任何类型都可以通过遵守Equatable协议而变得等效，协议可以这样做： struct Article: Equatable { static func ==(lhs: Self, rhs: Self) -&gt; Bool { lhs.title == rhs.title &amp;&amp; lhs.body == rhs.body } var title: String var body: String }","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/6.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"Equatable"}],["meta",{"property":"og:description","content":"Equatable 检查两个对象或值是否被视为相等，这绝对是所有编程中最常见的操作之一。 Swift实现相等的一个最有趣的方面是它都是以一种面向协议的方式完成的——任何类型都可以通过遵守Equatable协议而变得等效，协议可以这样做： struct Article: Equatable { static func ==(lhs: Self, rhs: Self) -&gt; Bool { lhs.title == rhs.title &amp;&amp; lhs.body == rhs.body } var title: String var body: String }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-24T06:52:03.000Z"}],["meta",{"property":"article:published_time","content":"2021-01-06T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-24T06:52:03.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Equatable\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-01-06T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-24T06:52:03.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679640723000,"updatedTime":1679640723000,"contributors":[{"name":"perhapsdone","email":"","commits":1}]},"readingTime":{"minutes":5.23,"words":1568},"filePathRelative":"开发/『Swift』/6.md","localizedDate":"2021年1月6日","excerpt":"<h1> Equatable</h1>\\n<p>检查两个对象或值是否被视为相等，这绝对是所有编程中最常见的操作之一。\\nSwift实现相等的一个最有趣的方面是它都是以一种面向协议的方式完成的——任何类型都可以通过遵守Equatable协议而变得等效，协议可以这样做：</p>\\n<div class=\\"language-swift line-numbers-mode\\" data-ext=\\"swift\\"><pre class=\\"language-swift\\"><code><span class=\\"token keyword\\">struct</span> <span class=\\"token class-name\\">Article</span><span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">Equatable</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token keyword\\">static</span> <span class=\\"token keyword\\">func</span> <span class=\\"token operator\\">==</span><span class=\\"token punctuation\\">(</span>lhs<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">Self</span><span class=\\"token punctuation\\">,</span> rhs<span class=\\"token punctuation\\">:</span> <span class=\\"token keyword\\">Self</span><span class=\\"token punctuation\\">)</span> <span class=\\"token operator\\">-&gt;</span> <span class=\\"token class-name\\">Bool</span> <span class=\\"token punctuation\\">{</span>\\n        lhs<span class=\\"token punctuation\\">.</span>title <span class=\\"token operator\\">==</span> rhs<span class=\\"token punctuation\\">.</span>title <span class=\\"token operator\\">&amp;&amp;</span> lhs<span class=\\"token punctuation\\">.</span>body <span class=\\"token operator\\">==</span> rhs<span class=\\"token punctuation\\">.</span>body\\n    <span class=\\"token punctuation\\">}</span>\\n\\n    <span class=\\"token keyword\\">var</span> title<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">String</span>\\n    <span class=\\"token keyword\\">var</span> body<span class=\\"token punctuation\\">:</span> <span class=\\"token class-name\\">String</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{a as data};
