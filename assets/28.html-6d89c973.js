const e=JSON.parse('{"key":"v-2ff085c5","path":"/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/28.html","title":"SEL和Method和IM","lang":"zh-CN","frontmatter":{"date":"2022-10-11T00:00:00.000Z","category":["iOS"],"tag":["区分","底层原理"],"description":"SEL和Method和IM SEL是方法名称，Method包含方法名称、参数类型和返回类型等信息，IMP是实际执行方法代码的函数指针。 SEL（选择器） 用于表示一个方法的名称。每个方法都有一个唯一的SEL，它是在运行时动态创建的。当使用对象发送消息时，实际上是通过SEL来调用方法。 例如，如果有一个方法叫做doSomething，那么它对应的SEL就是@selector(doSomething)。在发送消息时，可以使用这个SEL来调用doSomething方法： SEL funcSelector = @selector(func); [obj performSelector:funcSelector];","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/28.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"SEL和Method和IM"}],["meta",{"property":"og:description","content":"SEL和Method和IM SEL是方法名称，Method包含方法名称、参数类型和返回类型等信息，IMP是实际执行方法代码的函数指针。 SEL（选择器） 用于表示一个方法的名称。每个方法都有一个唯一的SEL，它是在运行时动态创建的。当使用对象发送消息时，实际上是通过SEL来调用方法。 例如，如果有一个方法叫做doSomething，那么它对应的SEL就是@selector(doSomething)。在发送消息时，可以使用这个SEL来调用doSomething方法： SEL funcSelector = @selector(func); [obj performSelector:funcSelector];"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T05:11:23.000Z"}],["meta",{"property":"article:tag","content":"区分"}],["meta",{"property":"article:tag","content":"底层原理"}],["meta",{"property":"article:published_time","content":"2022-10-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T05:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"SEL和Method和IM\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-10-11T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T05:11:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"SEL（选择器）","slug":"sel-选择器","link":"#sel-选择器","children":[]},{"level":2,"title":"Method（方法）","slug":"method-方法","link":"#method-方法","children":[]},{"level":2,"title":"IMP（实现指针）","slug":"imp-实现指针","link":"#imp-实现指针","children":[]}],"git":{"createdTime":1679640723000,"updatedTime":1679721083000,"contributors":[{"name":"perhapsdone","email":"","commits":2}]},"readingTime":{"minutes":1.95,"words":586},"filePathRelative":"开发/『iOS』/28.md","localizedDate":"2022年10月11日","excerpt":"<h1> SEL和Method和IM</h1>\\n<p>SEL是方法名称，Method包含方法名称、参数类型和返回类型等信息，IMP是实际执行方法代码的函数指针。</p>\\n<h2> SEL（选择器）</h2>\\n<p>用于表示一个方法的名称。每个方法都有一个唯一的SEL，它是在运行时动态创建的。当使用对象发送消息时，实际上是通过SEL来调用方法。<br></p>\\n<p>例如，如果有一个方法叫做doSomething，那么它对应的SEL就是@selector(doSomething)。在发送消息时，可以使用这个SEL来调用doSomething方法：</p>\\n<div class=\\"language-text line-numbers-mode\\" data-ext=\\"text\\"><pre class=\\"language-text\\"><code>SEL funcSelector = @selector(func);\\n[obj performSelector:funcSelector];\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{e as data};
