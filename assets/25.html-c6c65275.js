const t=JSON.parse('{"key":"v-2ad1fbe8","path":"/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/25.html","title":"isEqual,isEqualToString,==","lang":"zh-CN","frontmatter":{"date":"2021-04-10T00:00:00.000Z","category":["iOS"],"tag":["区分"],"description":"isEqual,isEqualToString,== isEqual 默认情况下是比较两个对象的内存地址；isEqual：就是提供了一个可以自定义相等标准的方法。 系统自带的类(比如 Foundation 中 的 NSString, NSArray 等)重写了这个方法，改变了这个方法的判断规则，一般改为比较两个对象的内容，不是内存地址. isEqualToString 字符串比较，只比较字符串本身的内容是否一致，不比较内存地址. == 两个对象的内存地址是一样，返回true，如果内存地址不一样，返回false.","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/25.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"isEqual,isEqualToString,=="}],["meta",{"property":"og:description","content":"isEqual,isEqualToString,== isEqual 默认情况下是比较两个对象的内存地址；isEqual：就是提供了一个可以自定义相等标准的方法。 系统自带的类(比如 Foundation 中 的 NSString, NSArray 等)重写了这个方法，改变了这个方法的判断规则，一般改为比较两个对象的内容，不是内存地址. isEqualToString 字符串比较，只比较字符串本身的内容是否一致，不比较内存地址. == 两个对象的内存地址是一样，返回true，如果内存地址不一样，返回false."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T05:11:23.000Z"}],["meta",{"property":"article:tag","content":"区分"}],["meta",{"property":"article:published_time","content":"2021-04-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T05:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"isEqual,isEqualToString,==\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-04-10T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T05:11:23.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"createdTime":1679640723000,"updatedTime":1679721083000,"contributors":[{"name":"perhapsdone","email":"","commits":2}]},"readingTime":{"minutes":0.52,"words":157},"filePathRelative":"开发/『iOS』/25.md","localizedDate":"2021年4月10日","excerpt":"<h1> isEqual,isEqualToString,==</h1>\\n<ul>\\n<li>\\n<p>isEqual\\n默认情况下是比较两个对象的内存地址；isEqual：就是提供了一个可以自定义相等标准的方法。\\n系统自带的类(比如 Foundation 中 的 NSString, NSArray 等)重写了这个方法，改变了这个方法的判断规则，一般改为比较两个对象的内容，不是内存地址.</p>\\n</li>\\n<li>\\n<p>isEqualToString\\n字符串比较，只比较字符串本身的内容是否一致，不比较内存地址.</p>\\n</li>\\n<li>\\n<p>==\\n两个对象的内存地址是一样，返回true，如果内存地址不一样，返回false.</p>\\n</li>\\n</ul>","autoDesc":true}');export{t as data};
