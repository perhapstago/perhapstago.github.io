import{_ as n,X as s,Y as a,Z as t}from"./framework-8d4f7cb8.js";const e={},p=t(`<h1 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包" aria-hidden="true">#</a> 闭包</h1><h2 id="创建基本闭包" tabindex="-1"><a class="header-anchor" href="#创建基本闭包" aria-hidden="true">#</a> 创建基本闭包</h2><p>创建了一个没有名称的函数，并将该函数分配给playing：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> playing <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am to play basketball&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>现在可以调用driving()，就像一个常规函数一样：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">driving</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="闭包参数" tabindex="-1"><a class="header-anchor" href="#闭包参数" aria-hidden="true">#</a> 闭包参数</h2><p>接受地名字符串作为其唯一的参数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> playing <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token keyword">in</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">place</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> to play basketball&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>函数和闭包有个区别是运行闭包时不使用参数标签。现在要调用playing()：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">playing</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Beijing&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="闭包返回值" tabindex="-1"><a class="header-anchor" href="#闭包返回值" aria-hidden="true">#</a> 闭包返回值</h2><p>需要in之前使用-&gt; String，然后像正常函数一样使用return：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> playingWithReturn <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">(</span>place<span class="token punctuation">:</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span> <span class="token keyword">in</span>
    <span class="token keyword">return</span> <span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation">place</span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> to play basketball&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用闭包并打印其返回值：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> message <span class="token operator">=</span> <span class="token function">playingWithReturn</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Beijing&quot;</span></span><span class="token punctuation">)</span>
<span class="token function">print</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="闭合作为参数" tabindex="-1"><a class="header-anchor" href="#闭合作为参数" aria-hidden="true">#</a> 闭合作为参数</h2><p>把该闭包传递到函数中以便可以在该函数内运行，将参数类型指定为() -&gt; Void。参数闭包“不接受任何参数，并返回Void”：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m getting ready to go.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I arrived!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>定义闭包：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> playing <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I am to play basketball&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>调用带参数为闭包的函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> playing<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="尾随闭包" tabindex="-1"><a class="header-anchor" href="#尾随闭包" aria-hidden="true">#</a> 尾随闭包</h2><p>如果函数的最后一个参数是闭包，Swift允许使用特殊语法 calledtrailing 闭包语法。 与其将闭包作为参数传递，不如直接在大括号内的函数之后传递它：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m getting ready to go.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token function">action</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I arrived!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多参数闭包" tabindex="-1"><a class="header-anchor" href="#多参数闭包" aria-hidden="true">#</a> 多参数闭包</h2><p>这次函数将需要一个闭包，指定位置和速度。这意味着需要使用(String, Int) -&gt; String作为参数的类型：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span>action<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Int</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m getting ready to go.&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> description <span class="token operator">=</span> <span class="token function">action</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Beijing&quot;</span></span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span>description<span class="token punctuation">)</span>
    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I arrived!&quot;</span></span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用尾随闭包和速记闭包参数名称。接受两个参数得到$0和$1：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code>travel <span class="token punctuation">{</span>
    <span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> at </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$1</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string"> miles per hour.&quot;</span></span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="函数返回闭包" tabindex="-1"><a class="header-anchor" href="#函数返回闭包" aria-hidden="true">#</a> 函数返回闭包</h2><p>就像可以将闭包传递给函数一样，也可以从函数中返回闭包。 一个不接受任何参数但返回闭包的travel()函数：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">func</span> <span class="token function-definition function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token class-name">Void</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;I&#39;m going to </span><span class="token interpolation-punctuation punctuation">\\(</span><span class="token interpolation"><span class="token short-argument">$0</span></span><span class="token interpolation-punctuation punctuation">)</span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以调用travel()来获取闭包，然后将其作为函数调用：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token function">result</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Beijing&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>从travel()调用返回值也是可以，虽然不推荐：</p><div class="language-swift line-numbers-mode" data-ext="swift"><pre class="language-swift"><code><span class="token keyword">let</span> result2 <span class="token operator">=</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string-literal"><span class="token string">&quot;Beijing&quot;</span></span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,38),i=[p];function o(c,l){return s(),a("div",null,i)}const r=n(e,[["render",o],["__file","2.html.vue"]]);export{r as default};
