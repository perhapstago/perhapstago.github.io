const t=JSON.parse('{"key":"v-17e406eb","path":"/%E5%BC%80%E5%8F%91/%E3%80%8ESwiftUI%E3%80%8F/6.html","title":"06.布局","lang":"zh-CN","frontmatter":{"date":"2022-5-29","category":["iOS","Swift","SwiftUI"],"description":"06.布局 在 SwiftUI 中，布局是通过在视图层次结构中嵌套视图来完成的。您可以使用各种视图类型和布局修饰符来控制视图的位置和大小。 布局 SwiftUI 提供了许多布局视图类型，例如 HStack、VStack、ZStack 和 Spacer。这些视图类型用于创建水平、垂直和层叠布局。 HStack HStack 用于创建水平布局。在 HStack 中添加的视图将按水平方向排列。可以使用 spacing 参数设置每个子视图之间的距离。 HStack(alignment: .center, spacing: 20) { Text(\\"Hello\\") Text(\\"World\\") }","head":[["meta",{"property":"og:url","content":"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8ESwiftUI%E3%80%8F/6.html"}],["meta",{"property":"og:site_name","content":"夏日的瓜牛"}],["meta",{"property":"og:title","content":"06.布局"}],["meta",{"property":"og:description","content":"06.布局 在 SwiftUI 中，布局是通过在视图层次结构中嵌套视图来完成的。您可以使用各种视图类型和布局修饰符来控制视图的位置和大小。 布局 SwiftUI 提供了许多布局视图类型，例如 HStack、VStack、ZStack 和 Spacer。这些视图类型用于创建水平、垂直和层叠布局。 HStack HStack 用于创建水平布局。在 HStack 中添加的视图将按水平方向排列。可以使用 spacing 参数设置每个子视图之间的距离。 HStack(alignment: .center, spacing: 20) { Text(\\"Hello\\") Text(\\"World\\") }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-03-25T05:11:23.000Z"}],["meta",{"property":"article:published_time","content":"2022-05-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-03-25T05:11:23.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"06.布局\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-05-29T00:00:00.000Z\\",\\"dateModified\\":\\"2023-03-25T05:11:23.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"布局","slug":"布局","link":"#布局","children":[{"level":3,"title":"HStack","slug":"hstack","link":"#hstack","children":[]},{"level":3,"title":"VStack","slug":"vstack","link":"#vstack","children":[]},{"level":3,"title":"ZStack","slug":"zstack","link":"#zstack","children":[]}]},{"level":2,"title":"布局修饰符","slug":"布局修饰符","link":"#布局修饰符","children":[{"level":3,"title":"frame","slug":"frame","link":"#frame","children":[]},{"level":3,"title":"padding","slug":"padding","link":"#padding","children":[]},{"level":3,"title":"background","slug":"background","link":"#background","children":[]}]}],"git":{"createdTime":1679640723000,"updatedTime":1679721083000,"contributors":[{"name":"perhapsdone","email":"","commits":2}]},"readingTime":{"minutes":1.83,"words":548},"filePathRelative":"开发/『SwiftUI』/6.md","localizedDate":"2022年5月29日","excerpt":"<h1> 06.布局</h1>\\n<p>在 SwiftUI 中，布局是通过在视图层次结构中嵌套视图来完成的。您可以使用各种视图类型和布局修饰符来控制视图的位置和大小。</p>\\n<h2> 布局</h2>\\n<p>SwiftUI 提供了许多布局视图类型，例如 HStack、VStack、ZStack 和 Spacer。这些视图类型用于创建水平、垂直和层叠布局。</p>\\n<h3> HStack</h3>\\n<p>HStack 用于创建水平布局。在 HStack 中添加的视图将按水平方向排列。可以使用 spacing 参数设置每个子视图之间的距离。</p>\\n<div class=\\"language-swift line-numbers-mode\\" data-ext=\\"swift\\"><pre class=\\"language-swift\\"><code><span class=\\"token class-name\\">HStack</span><span class=\\"token punctuation\\">(</span>alignment<span class=\\"token punctuation\\">:</span> <span class=\\"token punctuation\\">.</span>center<span class=\\"token punctuation\\">,</span> spacing<span class=\\"token punctuation\\">:</span> <span class=\\"token number\\">20</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n    <span class=\\"token class-name\\">Text</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal\\"><span class=\\"token string\\">\\"Hello\\"</span></span><span class=\\"token punctuation\\">)</span>\\n    <span class=\\"token class-name\\">Text</span><span class=\\"token punctuation\\">(</span><span class=\\"token string-literal\\"><span class=\\"token string\\">\\"World\\"</span></span><span class=\\"token punctuation\\">)</span>\\n<span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{t as data};
