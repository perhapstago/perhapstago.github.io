export const data = JSON.parse("{\"key\":\"v-56280bb9\",\"path\":\"/%E5%BC%80%E5%8F%91/%E3%80%8EOther%E3%80%8F/1.html\",\"title\":\"一些规范\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2020-08-09T00:00:00.000Z\",\"description\":\"一些规范 iOS开发中，规范的编码方式和风格可以使代码更加清晰易读、易于维护。 代码组织 文件名 文件名应该清晰明了，使用驼峰命名法，以首字母大写的类名为准。 对于 UIKit 和 Foundation 框架提供的类的扩展，应该以 + 为前缀，例如 String+Extension.swift。 代码结构 文件应该按照逻辑组织代码，不要将过多的代码放在一个文件中。 import 应该按照字母顺序排列，分组放置。系统框架应该在第一组。 代码应该按照生命周期的顺序进行编写：先是属性和初始化方法，接着是 viewDidLoad()，然后是其他的生命周期方法，最后是自定义的方法。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EOther%E3%80%8F/1.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"夏日的瓜牛\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"一些规范\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"一些规范 iOS开发中，规范的编码方式和风格可以使代码更加清晰易读、易于维护。 代码组织 文件名 文件名应该清晰明了，使用驼峰命名法，以首字母大写的类名为准。 对于 UIKit 和 Foundation 框架提供的类的扩展，应该以 + 为前缀，例如 String+Extension.swift。 代码结构 文件应该按照逻辑组织代码，不要将过多的代码放在一个文件中。 import 应该按照字母顺序排列，分组放置。系统框架应该在第一组。 代码应该按照生命周期的顺序进行编写：先是属性和初始化方法，接着是 viewDidLoad()，然后是其他的生命周期方法，最后是自定义的方法。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2020-08-09T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"一些规范\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2020-08-09T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"代码组织\",\"slug\":\"代码组织\",\"link\":\"#代码组织\",\"children\":[{\"level\":3,\"title\":\"文件名\",\"slug\":\"文件名\",\"link\":\"#文件名\",\"children\":[]},{\"level\":3,\"title\":\"代码结构\",\"slug\":\"代码结构\",\"link\":\"#代码结构\",\"children\":[]}]},{\"level\":2,\"title\":\"代码风格\",\"slug\":\"代码风格\",\"link\":\"#代码风格\",\"children\":[{\"level\":3,\"title\":\"缩进和空格\",\"slug\":\"缩进和空格\",\"link\":\"#缩进和空格\",\"children\":[]},{\"level\":3,\"title\":\"命名规范\",\"slug\":\"命名规范\",\"link\":\"#命名规范\",\"children\":[]},{\"level\":3,\"title\":\"注释\",\"slug\":\"注释\",\"link\":\"#注释\",\"children\":[]},{\"level\":3,\"title\":\"括号\",\"slug\":\"括号\",\"link\":\"#括号\",\"children\":[]},{\"level\":3,\"title\":\"函数\",\"slug\":\"函数\",\"link\":\"#函数\",\"children\":[]},{\"level\":3,\"title\":\"引用\",\"slug\":\"引用\",\"link\":\"#引用\",\"children\":[]},{\"level\":3,\"title\":\"类型推断\",\"slug\":\"类型推断\",\"link\":\"#类型推断\",\"children\":[]},{\"level\":3,\"title\":\"访问控制\",\"slug\":\"访问控制\",\"link\":\"#访问控制\",\"children\":[]},{\"level\":3,\"title\":\"错误处理\",\"slug\":\"错误处理\",\"link\":\"#错误处理\",\"children\":[]}]}],\"readingTime\":{\"minutes\":2.73,\"words\":819},\"filePathRelative\":\"开发/『Other』/1.md\",\"localizedDate\":\"2020年8月9日\",\"excerpt\":\"<h1> 一些规范</h1>\\n<p>iOS开发中，规范的编码方式和风格可以使代码更加清晰易读、易于维护。</p>\\n<h2> 代码组织</h2>\\n<h3> 文件名</h3>\\n<ul>\\n<li>文件名应该清晰明了，使用驼峰命名法，以首字母大写的类名为准。</li>\\n<li>对于 UIKit 和 Foundation 框架提供的类的扩展，应该以 + 为前缀，例如 String+Extension.swift。</li>\\n</ul>\\n<h3> 代码结构</h3>\\n<ul>\\n<li>文件应该按照逻辑组织代码，不要将过多的代码放在一个文件中。</li>\\n<li>import 应该按照字母顺序排列，分组放置。系统框架应该在第一组。</li>\\n<li>代码应该按照生命周期的顺序进行编写：先是属性和初始化方法，接着是 viewDidLoad()，然后是其他的生命周期方法，最后是自定义的方法。</li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
