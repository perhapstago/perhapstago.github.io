export const data = JSON.parse("{\"key\":\"v-76e44320\",\"path\":\"/%E5%BC%80%E5%8F%91/SwiftUI/4.html\",\"title\":\"04.状态管理和数据绑定\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2022-01-04T00:00:00.000Z\",\"category\":[\"苹果\",\"水果\"],\"tag\":[\"红\",\"大\",\"圆\"],\"description\":\"04.状态管理和数据绑定 在 Swift 和 Objective-C 中，我们使用代理和观察者模式来管理状态，但是在 SwiftUI 中，它引入了一种新的方法来管理状态 - 声明式数据流。 状态管理 在 SwiftUI 中，状态是希望应用程序在运行时更改的值。例如，可以为颜色、大小、位置等设置状态。在 SwiftUI 中，状态管理非常简单，因为每当状态更改时，视图自动重新渲染。 使用 @State 属性包装器声明状态，例如： struct ContentView: View { @State private var isOn = false var body: some View { Toggle(isOn: $isOn) { Text(\\\"Switch\\\") } } }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://yunpu.tech/%E5%BC%80%E5%8F%91/SwiftUI/4.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"夏日的瓜牛\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"04.状态管理和数据绑定\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"04.状态管理和数据绑定 在 Swift 和 Objective-C 中，我们使用代理和观察者模式来管理状态，但是在 SwiftUI 中，它引入了一种新的方法来管理状态 - 声明式数据流。 状态管理 在 SwiftUI 中，状态是希望应用程序在运行时更改的值。例如，可以为颜色、大小、位置等设置状态。在 SwiftUI 中，状态管理非常简单，因为每当状态更改时，视图自动重新渲染。 使用 @State 属性包装器声明状态，例如： struct ContentView: View { @State private var isOn = false var body: some View { Toggle(isOn: $isOn) { Text(\\\"Switch\\\") } } }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"红\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"大\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"圆\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-04T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"04.状态管理和数据绑定\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-04T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"状态管理\",\"slug\":\"状态管理\",\"link\":\"#状态管理\",\"children\":[]},{\"level\":2,\"title\":\"数据绑定\",\"slug\":\"数据绑定\",\"link\":\"#数据绑定\",\"children\":[]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}],\"readingTime\":{\"minutes\":1.87,\"words\":560},\"filePathRelative\":\"开发/SwiftUI/4.md\",\"localizedDate\":\"2022年1月4日\",\"excerpt\":\"<h1> 04.状态管理和数据绑定</h1>\\n<p>在 Swift 和 Objective-C 中，我们使用代理和观察者模式来管理状态，但是在 SwiftUI 中，它引入了一种新的方法来管理状态 - 声明式数据流。</p>\\n<h2> 状态管理</h2>\\n<p>在 SwiftUI 中，状态是希望应用程序在运行时更改的值。例如，可以为颜色、大小、位置等设置状态。在 SwiftUI 中，状态管理非常简单，因为每当状态更改时，视图自动重新渲染。</p>\\n<p>使用 @State 属性包装器声明状态，例如：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">ContentView</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">View</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token attribute atrule\\\">@State</span> <span class=\\\"token keyword\\\">private</span> <span class=\\\"token keyword\\\">var</span> isOn <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">false</span>\\n    \\n    <span class=\\\"token keyword\\\">var</span> body<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">some</span> <span class=\\\"token class-name\\\">View</span> <span class=\\\"token punctuation\\\">{</span>\\n        <span class=\\\"token class-name\\\">Toggle</span><span class=\\\"token punctuation\\\">(</span>isOn<span class=\\\"token punctuation\\\">:</span> $isOn<span class=\\\"token punctuation\\\">)</span> <span class=\\\"token punctuation\\\">{</span>\\n            <span class=\\\"token class-name\\\">Text</span><span class=\\\"token punctuation\\\">(</span><span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Switch\\\"</span></span><span class=\\\"token punctuation\\\">)</span>\\n        <span class=\\\"token punctuation\\\">}</span>\\n    <span class=\\\"token punctuation\\\">}</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
