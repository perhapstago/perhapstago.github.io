export const data = JSON.parse("{\"key\":\"v-439387f1\",\"path\":\"/%E5%BC%80%E5%8F%91/iPhone%20OS/8.html\",\"title\":\"实现常驻线程\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2022-01-02T00:00:00.000Z\",\"category\":[\"苹果\"],\"tag\":[\"红\",\"大\",\"圆\"],\"star\":true,\"description\":\"实现常驻线程 在 iOS 开发中，我们经常需要实现一个常驻线程来执行一些特定的任务，比如音视频播放、网络请求等，这些任务需要在一个单独的线程中执行，避免阻塞主线程和其他子线程的运行。 常驻线程指的是一个长期存在的线程，与普通线程不同的是，它不会随着任务的结束而被销毁，而是一直存在于内存中，等待新的任务到来。 常驻线程实现 实现一个常驻线程的关键在于创建一个与线程关联的 runloop，并在其中添加需要执行的任务。具体实现可以分为以下三个步骤： 1.创建一个线程对应的 RunLoop 2.向这个 RunLoop 中添加 Source/Timer/Observer 以及 Port 等内容 3.调用 CFRunLoop 的 run 方法\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://yunpu.tech/%E5%BC%80%E5%8F%91/iPhone%20OS/8.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"夏日的瓜牛\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"实现常驻线程\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"实现常驻线程 在 iOS 开发中，我们经常需要实现一个常驻线程来执行一些特定的任务，比如音视频播放、网络请求等，这些任务需要在一个单独的线程中执行，避免阻塞主线程和其他子线程的运行。 常驻线程指的是一个长期存在的线程，与普通线程不同的是，它不会随着任务的结束而被销毁，而是一直存在于内存中，等待新的任务到来。 常驻线程实现 实现一个常驻线程的关键在于创建一个与线程关联的 runloop，并在其中添加需要执行的任务。具体实现可以分为以下三个步骤： 1.创建一个线程对应的 RunLoop 2.向这个 RunLoop 中添加 Source/Timer/Observer 以及 Port 等内容 3.调用 CFRunLoop 的 run 方法\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"红\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"大\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"圆\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-02T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"实现常驻线程\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-02T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"常驻线程实现\",\"slug\":\"常驻线程实现\",\"link\":\"#常驻线程实现\",\"children\":[]},{\"level\":2,\"title\":\"创建一个线程对应的 RunLoop\",\"slug\":\"创建一个线程对应的-runloop\",\"link\":\"#创建一个线程对应的-runloop\",\"children\":[]},{\"level\":2,\"title\":\"向 RunLoop 中添加内容\",\"slug\":\"向-runloop-中添加内容\",\"link\":\"#向-runloop-中添加内容\",\"children\":[]},{\"level\":2,\"title\":\"总结\",\"slug\":\"总结\",\"link\":\"#总结\",\"children\":[]}],\"readingTime\":{\"minutes\":3.65,\"words\":1094},\"filePathRelative\":\"开发/iPhone OS/8.md\",\"localizedDate\":\"2022年1月2日\",\"excerpt\":\"<h1> 实现常驻线程</h1>\\n<p>在 iOS 开发中，我们经常需要实现一个常驻线程来执行一些特定的任务，比如音视频播放、网络请求等，这些任务需要在一个单独的线程中执行，避免阻塞主线程和其他子线程的运行。<br>\\n常驻线程指的是一个长期存在的线程，与普通线程不同的是，它不会随着任务的结束而被销毁，而是一直存在于内存中，等待新的任务到来。<br></p>\\n<h2> 常驻线程实现</h2>\\n<p>实现一个常驻线程的关键在于创建一个与线程关联的 runloop，并在其中添加需要执行的任务。具体实现可以分为以下三个步骤：</p>\\n<p>1.创建一个线程对应的 RunLoop\\n2.向这个 RunLoop 中添加 Source/Timer/Observer 以及 Port 等内容\\n3.调用 CFRunLoop 的 run 方法</p>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
