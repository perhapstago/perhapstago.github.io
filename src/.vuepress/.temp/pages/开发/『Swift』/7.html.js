export const data = JSON.parse("{\"key\":\"v-7d3e7876\",\"path\":\"/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/7.html\",\"title\":\"类型推断\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2021-1-12\",\"description\":\"类型推断 Swift是一种静态类型语言，这意味着声明的每个属性、常量和变量的类型都需要在编译时指定。然而，这通常不是需要手动完成的事情，相反，编译器能够自行计算出广泛的类型信息——这要归功于Swift支持类型推断。 这里声明了一些常量——所有这些都没有指定任何类型，因为编译器能够根据分配的值推断该信息： let number = 42 let string = \\\"Hello, world!\\\" let array = [1, 1, 2, 3, 5, 8] let dictionary = [\\\"key\\\": \\\"value\\\"]\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8ESwift%E3%80%8F/7.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"夏日的瓜牛\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"类型推断\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"类型推断 Swift是一种静态类型语言，这意味着声明的每个属性、常量和变量的类型都需要在编译时指定。然而，这通常不是需要手动完成的事情，相反，编译器能够自行计算出广泛的类型信息——这要归功于Swift支持类型推断。 这里声明了一些常量——所有这些都没有指定任何类型，因为编译器能够根据分配的值推断该信息： let number = 42 let string = \\\"Hello, world!\\\" let array = [1, 1, 2, 3, 5, 8] let dictionary = [\\\"key\\\": \\\"value\\\"]\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2021-01-11T16:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"类型推断\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2021-01-11T16:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[],\"readingTime\":{\"minutes\":3.92,\"words\":1176},\"filePathRelative\":\"开发/『Swift』/7.md\",\"localizedDate\":\"2021年1月12日\",\"excerpt\":\"<h1> 类型推断</h1>\\n<p>Swift是一种静态类型语言，这意味着声明的每个属性、常量和变量的类型都需要在编译时指定。然而，这通常不是需要手动完成的事情，相反，编译器能够自行计算出广泛的类型信息——这要归功于Swift支持类型推断。</p>\\n<p>这里声明了一些常量——所有这些都没有指定任何类型，因为编译器能够根据分配的值推断该信息：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">let</span> number <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">42</span>\\n<span class=\\\"token keyword\\\">let</span> string <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Hello, world!\\\"</span></span>\\n<span class=\\\"token keyword\\\">let</span> array <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">1</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">2</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">3</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">5</span><span class=\\\"token punctuation\\\">,</span> <span class=\\\"token number\\\">8</span><span class=\\\"token punctuation\\\">]</span>\\n<span class=\\\"token keyword\\\">let</span> dictionary <span class=\\\"token operator\\\">=</span> <span class=\\\"token punctuation\\\">[</span><span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"key\\\"</span></span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"value\\\"</span></span><span class=\\\"token punctuation\\\">]</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
