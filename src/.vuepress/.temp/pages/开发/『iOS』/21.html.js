export const data = JSON.parse("{\"key\":\"v-23fe996c\",\"path\":\"/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/21.html\",\"title\":\"metaclass\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2020-5-21\",\"description\":\"metaclass 在Objective-C中，每个类都有一个与之对应的元类。元类中存储了类方法和类属性等信息。当我们使用一个类方法时，实际上是通过类对象（Class object）在元类中查找相应的方法，然后进行调用。 作用 元类是类的描述类：元类可以描述类的属性和行为，包括类的实例变量、属性、方法等。通过元类，我们可以对类进行更加深入的理解和掌握。 元类可以创建类对象和类的实例：在Objective-C中，我们可以使用Class关键字创建一个类对象，而类对象又可以用来创建实例对象。这些操作都是通过元类实现的。 元类支持动态方法解析：元类提供了一个名为resolveClassMethod:或resolveInstanceMethod:的方法，它可以在运行时动态添加类方法或实例方法。这种机制可以帮助我们实现一些非常灵活的程序设计。 元类支持消息转发机制：在Objective-C中，如果一个对象无法响应某个消息，就会进入消息转发机制。元类也可以参与消息转发机制，用来处理某些特殊情况下的消息转发。\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://yunpu.tech/%E5%BC%80%E5%8F%91/%E3%80%8EiOS%E3%80%8F/21.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"夏日的瓜牛\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"metaclass\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"metaclass 在Objective-C中，每个类都有一个与之对应的元类。元类中存储了类方法和类属性等信息。当我们使用一个类方法时，实际上是通过类对象（Class object）在元类中查找相应的方法，然后进行调用。 作用 元类是类的描述类：元类可以描述类的属性和行为，包括类的实例变量、属性、方法等。通过元类，我们可以对类进行更加深入的理解和掌握。 元类可以创建类对象和类的实例：在Objective-C中，我们可以使用Class关键字创建一个类对象，而类对象又可以用来创建实例对象。这些操作都是通过元类实现的。 元类支持动态方法解析：元类提供了一个名为resolveClassMethod:或resolveInstanceMethod:的方法，它可以在运行时动态添加类方法或实例方法。这种机制可以帮助我们实现一些非常灵活的程序设计。 元类支持消息转发机制：在Objective-C中，如果一个对象无法响应某个消息，就会进入消息转发机制。元类也可以参与消息转发机制，用来处理某些特殊情况下的消息转发。\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2020-05-20T16:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"metaclass\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2020-05-20T16:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[{\"level\":2,\"title\":\"作用\",\"slug\":\"作用\",\"link\":\"#作用\",\"children\":[]},{\"level\":2,\"title\":\"内部结构和实现机制：\",\"slug\":\"内部结构和实现机制\",\"link\":\"#内部结构和实现机制\",\"children\":[]},{\"level\":2,\"title\":\"设计原因\",\"slug\":\"设计原因\",\"link\":\"#设计原因\",\"children\":[]}],\"readingTime\":{\"minutes\":3.59,\"words\":1077},\"filePathRelative\":\"开发/『iOS』/21.md\",\"localizedDate\":\"2020年5月21日\",\"excerpt\":\"<h1> metaclass</h1>\\n<p>在Objective-C中，每个类都有一个与之对应的元类。元类中存储了类方法和类属性等信息。当我们使用一个类方法时，实际上是通过类对象（Class object）在元类中查找相应的方法，然后进行调用。<br></p>\\n<h2> 作用</h2>\\n<ul>\\n<li>元类是类的描述类：元类可以描述类的属性和行为，包括类的实例变量、属性、方法等。通过元类，我们可以对类进行更加深入的理解和掌握。</li>\\n<li>元类可以创建类对象和类的实例：在Objective-C中，我们可以使用Class关键字创建一个类对象，而类对象又可以用来创建实例对象。这些操作都是通过元类实现的。</li>\\n<li>元类支持动态方法解析：元类提供了一个名为resolveClassMethod:或resolveInstanceMethod:的方法，它可以在运行时动态添加类方法或实例方法。这种机制可以帮助我们实现一些非常灵活的程序设计。</li>\\n<li>元类支持消息转发机制：在Objective-C中，如果一个对象无法响应某个消息，就会进入消息转发机制。元类也可以参与消息转发机制，用来处理某些特殊情况下的消息转发。</li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
