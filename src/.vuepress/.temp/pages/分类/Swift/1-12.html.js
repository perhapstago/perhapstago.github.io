export const data = JSON.parse("{\"key\":\"v-65248e42\",\"path\":\"/%E5%88%86%E7%B1%BB/Swift/1-12.html\",\"title\":\"Swift基础\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2023-01-03T00:00:00.000Z\",\"category\":[\"苹果\",\"水果\"],\"tag\":[\"红\",\"大\",\"圆\"],\"description\":\"Swift基础 基础数据类型 变量 初始化和修改变量： var str = \\\"Hello, playground\\\" str = \\\"Goodbye\\\" 变量可以存储和管理程序中的数据 字符串和整型 上边\\\"Hello, playground\\\"是一个字符串，Swift 分配为 String 类型 定义一个整数变量存储某人的年龄： var age = 18 大数字可以用下划线作为千位分隔符，不会改变数字本身 var population = 2_000_000 Swift 是一种类型安全的语言。 编译时会强制执行类型检查，确保使用的所有值都与其所期望的类型相匹配。这有助于减少由于类型错误导致的运行时错误和程序崩溃的风险。 Swift 的类型安全性其他好处: 更轻松地理解代码，清楚地知道每个值的类型。 使代码更容易维护，我们可以确定每个值的预期类型，不需要额外的类型转换或检查。 多行字符串 多行字符串，以三个双引号开始和结束： var str1 = \\\"\\\"\\\" This goes over multiple lines \\\"\\\"\\\" 多行字符串格式化代码，每行结尾加上一个\\\\，不会换行： var str2 = \\\"\\\"\\\" This goes \\\\ over multiple \\\\ lines \\\"\\\"\\\" 多行字符串以一种更易读和更自然的方式定义和操作包含多行文本的字符串。如果不使用多行字符串，处理包含多行文本的字符串可能会变得困难和不直观，需要在每一行的结尾处添加换行符，这样就会导致代码变得冗长和难以维护。 多行字符串还提供了许多额外的功能，例如在字符串中包含引号和换行符等特殊字符，而无需对它们进行转义处理，使得处理包含多行文本的字符串变得更加简单和直观。 双精度和布尔值 创建带有小数的变量时，Swift 会自动为该变量赋予类型Double var pi = 3.141 布尔值只有 true 或 false var believe = true 双精度和整数是为了能够处理各种不同类型的数值数据，并且能够在程序中执行各种数学运算。 Swift 提供了多种整数和双精度浮点数类型来满足这些不同的需求。 字符串插值 字符串中放置任何类型的变量，反斜杠(变量名)： var score = 85 var str = \\\"Your score was \\\\(score)\\\" 字符串插值方便在字符串中插入变量、常量和表达式等内容，使得字符串构建更加简单和方便。 常量 关键字 let 创建常量，这些值只可以设置一次不可修改 let taylor = \\\"swift\\\" 既有常量又有变量是为了提供更加灵活和安全的编程环境。使用常量和变量，开发人员可以更好地控制和管理程序中的数据，避免出现错误，并且可以使程序更加灵活和适应性强。 类型推断 Swift 根据创建时赋予的值为每个变量和常量分配一个类型，这将生成一个字符串，之后不能为其分配一个整数或布尔值： let str = \\\"Hello, playground\\\" 也可以明确数据类型，不依赖 Swift 的类型推断： let album: String = \\\"Reputation\\\" let year: Int = 1989 let height: Double = 1.78 let taylorRocks: Bool = true 类型注解是可以提高代码的可读性、可维护性、安全性和精确性，以及使编程更加方便和高效。\"},\"headers\":[{\"level\":2,\"title\":\"基础数据类型\",\"slug\":\"基础数据类型\",\"link\":\"#基础数据类型\",\"children\":[]},{\"level\":2,\"title\":\"复杂数据类型\",\"slug\":\"复杂数据类型\",\"link\":\"#复杂数据类型\",\"children\":[]}],\"readingTime\":{\"minutes\":5.86,\"words\":1757},\"filePathRelative\":\"分类/Swift/1-12.md\",\"localizedDate\":\"2023年1月3日\",\"excerpt\":\"<h1> Swift基础</h1>\\n<h2> 基础数据类型</h2>\\n<ul>\\n<li>\\n<p>变量</p>\\n<p>初始化和修改变量：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Hello, playground\\\"</span></span>\\nstr <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Goodbye\\\"</span></span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>变量可以存储和管理程序中的数据</p>\\n</blockquote>\\n<hr>\\n</li>\\n<li>\\n<p>字符串和整型</p>\\n<blockquote>\\n<p>上边\\\"Hello, playground\\\"是一个字符串，Swift 分配为 String 类型</p>\\n</blockquote>\\n<p>定义一个整数变量存储某人的年龄：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> age <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">18</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div><p>大数字可以用下划线作为千位分隔符，不会改变数字本身</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> population <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">2_000_000</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>Swift 是一种类型安全的语言。</p>\\n<p>编译时会强制执行类型检查，确保使用的所有值都与其所期望的类型相匹配。这有助于减少由于类型错误导致的运行时错误和程序崩溃的风险。</p>\\n</blockquote>\\n<blockquote>\\n<p>Swift 的类型安全性其他好处:</p>\\n<p>更轻松地理解代码，清楚地知道每个值的类型。</p>\\n<p>使代码更容易维护，我们可以确定每个值的预期类型，不需要额外的类型转换或检查。</p>\\n</blockquote>\\n<hr>\\n</li>\\n<li>\\n<p>多行字符串</p>\\n<p>多行字符串，以三个双引号开始和结束：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> str1 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"\\\"\\\"\\nThis goes\\nover multiple\\nlines\\n\\\"\\\"\\\"</span></span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><p>多行字符串格式化代码，每行结尾加上一个\\\\，不会换行：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> str2 <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"\\\"\\\"\\nThis goes </span><span class=\\\"token punctuation\\\">\\\\</span><span class=\\\"token string\\\">\\nover multiple </span><span class=\\\"token punctuation\\\">\\\\</span><span class=\\\"token string\\\">\\nlines\\n\\\"\\\"\\\"</span></span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>多行字符串以一种更易读和更自然的方式定义和操作包含多行文本的字符串。如果不使用多行字符串，处理包含多行文本的字符串可能会变得困难和不直观，需要在每一行的结尾处添加换行符，这样就会导致代码变得冗长和难以维护。</p>\\n<p>多行字符串还提供了许多额外的功能，例如在字符串中包含引号和换行符等特殊字符，而无需对它们进行转义处理，使得处理包含多行文本的字符串变得更加简单和直观。</p>\\n</blockquote>\\n<hr>\\n</li>\\n<li>\\n<p>双精度和布尔值</p>\\n<p>创建带有小数的变量时，Swift 会自动为该变量赋予类型Double</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> pi <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">3.141</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div><p>布尔值只有 true 或 false</p>\\n<div class=\\\"language-text line-numbers-mode\\\" data-ext=\\\"text\\\"><pre class=\\\"language-text\\\"><code>var believe = true\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>双精度和整数是为了能够处理各种不同类型的数值数据，并且能够在程序中执行各种数学运算。</p>\\n<p>Swift 提供了多种整数和双精度浮点数类型来满足这些不同的需求。</p>\\n</blockquote>\\n<hr>\\n</li>\\n<li>\\n<p>字符串插值</p>\\n<p>字符串中放置任何类型的变量，反斜杠(变量名)：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">var</span> score <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">85</span>\\n<span class=\\\"token keyword\\\">var</span> str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Your score was </span><span class=\\\"token interpolation-punctuation punctuation\\\">\\\\(</span><span class=\\\"token interpolation\\\">score</span><span class=\\\"token interpolation-punctuation punctuation\\\">)</span><span class=\\\"token string\\\">\\\"</span></span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>字符串插值方便在字符串中插入变量、常量和表达式等内容，使得字符串构建更加简单和方便。</p>\\n</blockquote>\\n<hr>\\n</li>\\n<li>\\n<p>常量</p>\\n<p>关键字 let 创建常量，这些值只可以设置一次不可修改</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">let</span> taylor <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"swift\\\"</span></span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>既有常量又有变量是为了提供更加灵活和安全的编程环境。使用常量和变量，开发人员可以更好地控制和管理程序中的数据，避免出现错误，并且可以使程序更加灵活和适应性强。</p>\\n</blockquote>\\n<hr>\\n</li>\\n<li>\\n<p>类型推断</p>\\n<p>Swift 根据创建时赋予的值为每个变量和常量分配一个类型，这将生成一个字符串，之后不能为其分配一个整数或布尔值：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">let</span> str <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Hello, playground\\\"</span></span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div></div></div><p>也可以明确数据类型，不依赖 Swift 的类型推断：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">let</span> album<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">String</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token string-literal\\\"><span class=\\\"token string\\\">\\\"Reputation\\\"</span></span>\\n<span class=\\\"token keyword\\\">let</span> year<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Int</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1989</span>\\n<span class=\\\"token keyword\\\">let</span> height<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Double</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token number\\\">1.78</span>\\n<span class=\\\"token keyword\\\">let</span> taylorRocks<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Bool</span> <span class=\\\"token operator\\\">=</span> <span class=\\\"token boolean\\\">true</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div><blockquote>\\n<p>类型注解是可以提高代码的可读性、可维护性、安全性和精确性，以及使编程更加方便和高效。</p>\\n</blockquote>\\n</li>\\n</ul>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
