export const data = JSON.parse("{\"key\":\"v-2d19f4b0\",\"path\":\"/%E5%85%B6%E4%BB%96/Swift/6.html\",\"title\":\"Equatable\",\"lang\":\"zh-CN\",\"frontmatter\":{\"date\":\"2022-01-04T00:00:00.000Z\",\"category\":[\"苹果\",\"水果\"],\"tag\":[\"红\",\"大\",\"圆\"],\"description\":\"Equatable 检查两个对象或值是否被视为相等，这绝对是所有编程中最常见的操作之一。 Swift实现相等的一个最有趣的方面是它都是以一种面向协议的方式完成的——任何类型都可以通过遵守Equatable协议而变得等效，协议可以这样做： struct Article: Equatable { static func ==(lhs: Self, rhs: Self) -&gt; Bool { lhs.title == rhs.title &amp;&amp; lhs.body == rhs.body } var title: String var body: String }\",\"head\":[[\"meta\",{\"property\":\"og:url\",\"content\":\"http://yunpu.tech/%E5%85%B6%E4%BB%96/Swift/6.html\"}],[\"meta\",{\"property\":\"og:site_name\",\"content\":\"夏日的瓜牛\"}],[\"meta\",{\"property\":\"og:title\",\"content\":\"Equatable\"}],[\"meta\",{\"property\":\"og:description\",\"content\":\"Equatable 检查两个对象或值是否被视为相等，这绝对是所有编程中最常见的操作之一。 Swift实现相等的一个最有趣的方面是它都是以一种面向协议的方式完成的——任何类型都可以通过遵守Equatable协议而变得等效，协议可以这样做： struct Article: Equatable { static func ==(lhs: Self, rhs: Self) -&gt; Bool { lhs.title == rhs.title &amp;&amp; lhs.body == rhs.body } var title: String var body: String }\"}],[\"meta\",{\"property\":\"og:type\",\"content\":\"article\"}],[\"meta\",{\"property\":\"og:locale\",\"content\":\"zh-CN\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"红\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"大\"}],[\"meta\",{\"property\":\"article:tag\",\"content\":\"圆\"}],[\"meta\",{\"property\":\"article:published_time\",\"content\":\"2022-01-04T00:00:00.000Z\"}],[\"script\",{\"type\":\"application/ld+json\"},\"{\\\"@context\\\":\\\"https://schema.org\\\",\\\"@type\\\":\\\"Article\\\",\\\"headline\\\":\\\"Equatable\\\",\\\"image\\\":[\\\"\\\"],\\\"datePublished\\\":\\\"2022-01-04T00:00:00.000Z\\\",\\\"dateModified\\\":null,\\\"author\\\":[]}\"]]},\"headers\":[],\"readingTime\":{\"minutes\":5.26,\"words\":1577},\"filePathRelative\":\"其他/Swift/6.md\",\"localizedDate\":\"2022年1月4日\",\"excerpt\":\"<h1> Equatable</h1>\\n<p>检查两个对象或值是否被视为相等，这绝对是所有编程中最常见的操作之一。\\nSwift实现相等的一个最有趣的方面是它都是以一种面向协议的方式完成的——任何类型都可以通过遵守Equatable协议而变得等效，协议可以这样做：</p>\\n<div class=\\\"language-swift line-numbers-mode\\\" data-ext=\\\"swift\\\"><pre class=\\\"language-swift\\\"><code><span class=\\\"token keyword\\\">struct</span> <span class=\\\"token class-name\\\">Article</span><span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">Equatable</span> <span class=\\\"token punctuation\\\">{</span>\\n    <span class=\\\"token keyword\\\">static</span> <span class=\\\"token keyword\\\">func</span> <span class=\\\"token operator\\\">==</span><span class=\\\"token punctuation\\\">(</span>lhs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">Self</span><span class=\\\"token punctuation\\\">,</span> rhs<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token keyword\\\">Self</span><span class=\\\"token punctuation\\\">)</span> <span class=\\\"token operator\\\">-&gt;</span> <span class=\\\"token class-name\\\">Bool</span> <span class=\\\"token punctuation\\\">{</span>\\n        lhs<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">==</span> rhs<span class=\\\"token punctuation\\\">.</span>title <span class=\\\"token operator\\\">&amp;&amp;</span> lhs<span class=\\\"token punctuation\\\">.</span>body <span class=\\\"token operator\\\">==</span> rhs<span class=\\\"token punctuation\\\">.</span>body\\n    <span class=\\\"token punctuation\\\">}</span>\\n\\n    <span class=\\\"token keyword\\\">var</span> title<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">String</span>\\n    <span class=\\\"token keyword\\\">var</span> body<span class=\\\"token punctuation\\\">:</span> <span class=\\\"token class-name\\\">String</span>\\n<span class=\\\"token punctuation\\\">}</span>\\n</code></pre><div class=\\\"line-numbers\\\" aria-hidden=\\\"true\\\"><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div><div class=\\\"line-number\\\"></div></div></div>\",\"autoDesc\":true}")

if (import.meta.webpackHot) {
  import.meta.webpackHot.accept()
  if (__VUE_HMR_RUNTIME__.updatePageData) {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  }
}

if (import.meta.hot) {
  import.meta.hot.accept(({ data }) => {
    __VUE_HMR_RUNTIME__.updatePageData(data)
  })
}
